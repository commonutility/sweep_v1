{"version":3,"file":"BacktestingView-CrVYcYzc.js","sources":["../../node_modules/.pnpm/@primeuix+styles@1.0.0/node_modules/@primeuix/styles/radiobuttongroup/index.mjs","../../node_modules/.pnpm/primevue@4.3.3_vue@3.5.13_typescript@5.8.3_/node_modules/primevue/radiobuttongroup/style/index.mjs","../../node_modules/.pnpm/primevue@4.3.3_vue@3.5.13_typescript@5.8.3_/node_modules/primevue/radiobuttongroup/index.mjs","../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/components/charts/MarketChangeChart.vue","../../src/components/charts/TradeDurationChart.vue","../../src/components/ftbot/BacktestGraphs.vue","../../src/utils/objectToTableItems.ts","../../src/components/ftbot/BacktestResultComparison.vue","../../src/components/ftbot/BacktestResultPeriodBreakdown.vue","../../src/components/ftbot/BacktestResultTablePer.vue","../../src/components/ftbot/BacktestResultAnalysis.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/stores/btStore.ts","../../src/components/ftbot/BacktestRun.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["var style=\"\\n.p-radiobutton-group {\\n    display: inline-flex;\\n}\\n\";export{style};//# sourceMappingURL=index.mjs.map","import { style } from '@primeuix/styles/radiobuttongroup';\nimport BaseStyle from '@primevue/core/base/style';\n\nvar classes = {\n  root: 'p-radiobutton-group p-component'\n};\nvar RadioButtonGroupStyle = BaseStyle.extend({\n  name: 'radiobuttongroup',\n  style: style,\n  classes: classes\n});\n\nexport { RadioButtonGroupStyle as default };\n//# sourceMappingURL=index.mjs.map\n","import { uuid } from '@primeuix/utils';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport RadioButtonGroupStyle from 'primevue/radiobuttongroup/style';\nimport { createElementBlock, openBlock, mergeProps, renderSlot } from 'vue';\n\nvar script$1 = {\n  name: 'BaseRadioButtonGroup',\n  \"extends\": BaseEditableHolder,\n  style: RadioButtonGroupStyle,\n  provide: function provide() {\n    return {\n      $pcRadioButtonGroup: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'RadioButtonGroup',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      groupName: this.name\n    };\n  },\n  watch: {\n    name: function name(newValue) {\n      this.groupName = newValue || uuid('radiobutton-group-');\n    }\n  },\n  mounted: function mounted() {\n    this.groupName = this.groupName || uuid('radiobutton-group-');\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [renderSlot(_ctx.$slots, \"default\")], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n","<script setup lang=\"ts\">\nimport type { Trade } from '@/types';\n\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Trade[] },\n  backtestMode: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits<{ 'trade-select': [trade: Trade] }>();\n\nconst botStore = useBotStore();\nconst selectedTrade = ref({} as Trade);\nconst sortDescendingOrder = ref(true);\nconst sortMethod = ref('openDate');\nconst sortMethodOptions = [\n  { text: 'Open date', value: 'openDate' },\n  { text: 'Profit %', value: 'profit' },\n];\n\nconst onTradeSelect = (trade: Trade) => {\n  selectedTrade.value = trade;\n  emit('trade-select', trade);\n};\n\nconst sortedTrades = computed(() => {\n  const field: keyof Trade = sortMethod.value === 'profit' ? 'profit_ratio' : 'open_timestamp';\n  return sortDescendingOrder.value\n    ? props.trades.slice().sort((a, b) => b[field] - a[field])\n    : props.trades.slice().sort((a, b) => a[field] - b[field]);\n});\n\nconst ordersVisible = ref(sortedTrades.value.map(() => false));\n\nwatch(\n  () => botStore.activeBot.selectedPair,\n  () => {\n    ordersVisible.value = sortedTrades.value.map(() => false);\n  },\n);\n</script>\n\n<template>\n  <div>\n    <div class=\"flex justify-center\">\n      <span class=\"me-2\">Sort by:</span>\n      <RadioButtonGroup v-model=\"sortMethod\" :options=\"sortMethodOptions\" name=\"radio-options\">\n        <div v-for=\"opt in sortMethodOptions\" :key=\"opt.value\" class=\"flex items-center\">\n          <RadioButton :id=\"`id-${opt.value}`\" :value=\"opt.value\" />\n          <label :for=\"`id-${opt.value}`\">{{ opt.text }}</label>\n        </div>\n      </RadioButtonGroup>\n    </div>\n    <ul\n      class=\"divide-y divide-surface-300 dark:divide-surface-700 divide-solid border-x border-y rounded-sm border-surface-300 dark:border-surface-700\"\n    >\n      <Button\n        severity=\"secondary\"\n        variant=\"text\"\n        class=\"w-full flex flex-wrap justify-center items-center\"\n        :title=\"'Trade Navigation'\"\n        @click=\"sortDescendingOrder = !sortDescendingOrder\"\n        >Trade Navigation {{ sortDescendingOrder ? '&#8595;' : '&#8593;' }}\n      </Button>\n      <li\n        v-for=\"(trade, i) in sortedTrades\"\n        :key=\"trade.open_timestamp\"\n        class=\"flex flex-col py-1 px-1 items-stretch\"\n        :title=\"`${trade.pair}`\"\n        :class=\"{\n          'bg-primary-100 dark:bg-primary-800 text-primary-contrast':\n            trade.open_timestamp === selectedTrade.open_timestamp,\n        }\"\n        @click=\"onTradeSelect(trade)\"\n      >\n        <div class=\"flex\">\n          <div class=\"flex flex-col\">\n            <div>\n              <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\n                trade.is_short ? 'S-' : 'L-'\n              }}</span>\n              <DateTimeTZ :date=\"trade.open_timestamp\" />\n            </div>\n            <TradeProfit :trade=\"trade\" class=\"my-1\" />\n            <ProfitPill\n              v-if=\"backtestMode\"\n              :profit-ratio=\"trade.profit_ratio\"\n              :stake-currency=\"botStore.activeBot.stakeCurrency\"\n            />\n          </div>\n          <Button\n            size=\"small\"\n            class=\"ms-auto mt-auto\"\n            variant=\"outlined\"\n            severity=\"secondary\"\n            @click=\"ordersVisible[i] = !ordersVisible[i]\"\n            ><i-mdi-chevron-right v-if=\"!ordersVisible[i]\" width=\"24\" height=\"24\" />\n            <i-mdi-chevron-down v-if=\"ordersVisible[i]\" width=\"24\" height=\"24\" />\n          </Button>\n        </div>\n        <Transition>\n          <div v-if=\"ordersVisible[i]\">\n            <ul class=\"px-3 m-0 list-disc list-inside\">\n              <li\n                v-for=\"order in trade.orders?.filter((o) => o.order_filled_timestamp !== null)\"\n                :key=\"order.order_timestamp\"\n              >\n                {{ order.ft_order_side }} {{ order.amount }} at {{ order.safe_price }}\n              </li>\n            </ul>\n          </div>\n        </Transition>\n      </li>\n      <div v-if=\"trades.length === 0\">No trades to show...</div>\n    </ul>\n  </div>\n</template>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nimport type { ChartSliderPosition, StrategyBacktestResult, Trade } from '@/types';\n\nconst props = defineProps<{\n  timeframe: string;\n  strategy: string;\n  freqaiModel?: string;\n  timerange: string;\n  backtestResult: StrategyBacktestResult;\n}>();\nconst botStore = useBotStore();\nconst isBarVisible = ref({ right: true, left: true });\nconst sliderPosition = ref<ChartSliderPosition>();\n\nconst navigateChartToTrade = (trade: Trade) => {\n  sliderPosition.value = {\n    startValue: trade.open_timestamp,\n    endValue: trade.close_timestamp,\n  };\n};\n\nfunction refreshOHLCV(pair: string, columns: string[]) {\n  botStore.activeBot.getPairHistory({\n    pair: pair,\n    timeframe: props.timeframe,\n    timerange: props.timerange,\n    strategy: props.strategy,\n    freqaimodel: props.freqaiModel,\n    columns: columns,\n  });\n}\n</script>\n\n<template>\n  <div>\n    <div class=\"flex flex-row mb-1 items-center\">\n      <div class=\"me-2\">\n        <Button\n          aria-label=\"Close\"\n          title=\"Pair Navigation\"\n          severity=\"secondary\"\n          variant=\"outlined\"\n          size=\"small\"\n          @click=\"isBarVisible.left = !isBarVisible.left\"\n        >\n          <i-mdi-chevron-right v-if=\"!isBarVisible.left\" width=\"24\" height=\"24\" />\n          <i-mdi-chevron-left v-if=\"isBarVisible.left\" width=\"24\" height=\"24\" />\n        </Button>\n      </div>\n      <span class=\"grow\">\n        Graph will always show the latest values for the selected strategy. <br />\n        Timerange: {{ timerange }} - {{ strategy }}\n      </span>\n      <div class=\"text-end\">\n        <Button\n          aria-label=\"Close\"\n          variant=\"outlined\"\n          title=\"Trade Navigation\"\n          size=\"small\"\n          severity=\"secondary\"\n          @click=\"isBarVisible.right = !isBarVisible.right\"\n        >\n          <i-mdi-chevron-right v-if=\"isBarVisible.right\" width=\"24\" height=\"24\" />\n          <i-mdi-chevron-left v-if=\"!isBarVisible.right\" width=\"24\" height=\"24\" />\n        </Button>\n      </div>\n    </div>\n    <div class=\"text-center flex flex-row h-full items-stretch\">\n      <Transition name=\"fadeleft\">\n        <PairSummary\n          v-if=\"isBarVisible.left\"\n          class=\"overflow-y-auto overflow-x-hidden\"\n          style=\"max-height: calc(100vh - 200px)\"\n          :pairlist=\"backtestResult.pairlist\"\n          :trades=\"backtestResult.trades\"\n          :starting-balance=\"backtestResult.starting_balance\"\n          sort-method=\"profit\"\n          :backtest-mode=\"true\"\n        />\n      </Transition>\n      <CandleChartContainer\n        :available-pairs=\"backtestResult.pairlist\"\n        :historic-view=\"!!true\"\n        :timeframe=\"timeframe\"\n        :timerange=\"timerange\"\n        :strategy=\"strategy\"\n        :trades=\"backtestResult.trades\"\n        class=\"flex-shrink-1 candle-chart-container w-full px-0 h-full align-self-stretch\"\n        :slider-position=\"sliderPosition\"\n        :freqai-model=\"freqaiModel\"\n        @refresh-data=\"refreshOHLCV\"\n      >\n      </CandleChartContainer>\n      <Transition name=\"fade\">\n        <TradeListNav\n          v-if=\"isBarVisible.right\"\n          class=\"overflow-y-auto overflow-x-visible min-w-56\"\n          style=\"max-height: calc(100vh - 200px)\"\n          :trades=\"backtestResult.trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\n          @trade-select=\"navigateChartToTrade\"\n        />\n      </Transition>\n    </div>\n    <DraggableContainer header=\"Single trades\" class=\"row mt-2 w-full\">\n      <TradeList\n        class=\"row trade-history mt-2 w-full\"\n        :trades=\"backtestResult.trades\"\n        :show-filter=\"true\"\n      />\n    </DraggableContainer>\n  </div>\n</template>\n\n<style lang=\"css\" scoped>\n.candle-chart-container {\n  /* TODO: Rough estimate - still to fix correctly\n   Applies to all \"calc\" usages in this file. */\n  height: calc(100vh - 250px) !important;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n.fadeleft-enter-active,\n.fadeleft-leave-active {\n  transition: all 0.2s;\n}\n\n.fadeleft-enter-from,\n.fadeleft-leave-to {\n  opacity: 0;\n  transform: translateX(-30px);\n}\n</style>\n","<script setup lang=\"ts\">\nimport ECharts from 'vue-echarts';\n// import { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart } from 'echarts/charts';\nimport {\n  DataZoomComponent,\n  DatasetComponent,\n  GridComponent,\n  LegendComponent,\n  CalendarComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n} from 'echarts/components';\n\nimport type { BacktestMarketChange } from '@/types';\nimport type { EChartsOption } from 'echarts';\n\nuse([\n  LineChart,\n  CalendarComponent,\n  CanvasRenderer,\n  GridComponent,\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_MARKET_CHANGE = 'Market change %';\n\nconst props = withDefaults(\n  defineProps<{\n    marketChangeData: BacktestMarketChange | null;\n    showTitle?: boolean;\n  }>(),\n  {\n    showTitle: true,\n  },\n);\n\nconst settingsStore = useSettingsStore();\n\nconst marketChangeChart = ref(null);\n\nconst marketChangeOptions: ComputedRef<EChartsOption> = computed(() => {\n  if (!props.marketChangeData) {\n    return {};\n  }\n  const colDate = props.marketChangeData.columns.findIndex((el) => el === '__date_ts');\n  const colRelMean = props.marketChangeData.columns.findIndex((el) => el === 'rel_mean');\n  return {\n    title: {\n      text: 'Market change %',\n      left: 'center',\n      show: props.showTitle,\n    },\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: {\n      source: props.marketChangeData.data,\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'line',\n        label: {\n          backgroundColor: '#6a7985',\n        },\n      },\n    },\n    grid: {\n      ...echartsGridDefault,\n    },\n    legend: {\n      data: [CHART_MARKET_CHANGE],\n      right: '5%',\n      selectedMode: false,\n    },\n    xAxis: [\n      {\n        type: 'time',\n        axisLine: { onZero: false },\n        axisTick: { show: true },\n        axisLabel: { show: true },\n        axisPointer: {\n          label: { show: false },\n        },\n        // position: 'top',\n        splitLine: { show: false },\n        splitNumber: 20,\n        min: 'dataMin',\n        max: 'dataMax',\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        name: CHART_MARKET_CHANGE,\n        splitLine: {\n          show: false,\n        },\n        nameRotate: 90,\n        nameLocation: 'middle',\n        nameGap: 35,\n      },\n    ],\n    dataZoom: [\n      {\n        type: 'inside',\n        start: 0,\n        end: 100,\n      },\n      {\n        bottom: 10,\n        start: 0,\n        end: 100,\n        ...dataZoomPartial,\n      },\n    ],\n    series: [\n      {\n        type: 'line',\n        name: CHART_MARKET_CHANGE,\n        showSymbol: false,\n        color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n        encode: {\n          x: colDate,\n          // open, close, low, high\n          y: colRelMean,\n        },\n      },\n    ],\n  };\n});\n</script>\n\n<template>\n  <ECharts\n    v-if=\"marketChangeData?.data\"\n    ref=\"marketChangeChart\"\n    :option=\"marketChangeOptions\"\n    :theme=\"settingsStore.chartTheme\"\n    autoresize\n  />\n</template>\n\n<style lang=\"css\" scoped>\n.echarts {\n  min-height: 240px;\n  height: 100%;\n}\n</style>\n","<script setup lang=\"ts\">\nimport ECharts from 'vue-echarts';\nimport type { ClosedTrade } from '@/types';\nimport type { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { BoxplotChart, ScatterChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  DataZoomComponent,\n  GridComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  TransformComponent,\n  VisualMapComponent,\n} from 'echarts/components';\n\nconst props = withDefaults(\n  defineProps<{\n    trades: ClosedTrade[];\n    showTitle?: boolean;\n  }>(),\n  {\n    showTitle: true,\n  },\n);\n\nconst settingsStore = useSettingsStore();\n\nuse([\n  DatasetComponent,\n  TitleComponent,\n  TooltipComponent,\n  GridComponent,\n  LegendComponent,\n  DataZoomComponent,\n  TransformComponent,\n  BoxplotChart,\n  CanvasRenderer,\n  VisualMapComponent,\n  ScatterChart,\n]);\n\nconst allTrades = computed(() => {\n  return props.trades.map((trade) => {\n    // Convert timestamp difference to minutes (timestamps are in milliseconds)\n    return (trade.close_timestamp - trade.open_timestamp) / (60 * 1000);\n  });\n});\n\nconst winningTrades = computed(() => {\n  return props.trades\n    .filter((trade) => trade.profit_ratio > 0)\n    .map((trade) => {\n      return (trade.close_timestamp - trade.open_timestamp) / (60 * 1000);\n    });\n});\n\nconst losingTrades = computed(() => {\n  return props.trades\n    .filter((trade) => trade.profit_ratio <= 0)\n    .map((trade) => {\n      return (trade.close_timestamp - trade.open_timestamp) / (60 * 1000);\n    });\n});\n\nconst chartOptions = computed((): EChartsOption => {\n  return {\n    title: {\n      text: 'Trades durations',\n      left: 'center',\n      show: props.showTitle,\n    },\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: [\n      {\n        id: 'allTrades',\n        source: [allTrades.value, winningTrades.value, losingTrades.value],\n      },\n      {\n        id: 'allTradesBoxplot',\n        fromDatasetId: 'allTrades',\n        transform: {\n          type: 'boxplot',\n\n          config: {\n            itemNameFormatter: (params) => {\n              if (params.value === 0) {\n                return 'All trades';\n              } else if (params.value === 1) {\n                return 'Winning trades';\n              } else if (params.value === 2) {\n                return 'Losing trades';\n              }\n            },\n          },\n        },\n      },\n      {\n        id: 'outlier',\n        fromDatasetIndex: 1,\n        fromTransformResult: 1,\n      },\n    ],\n    xAxis: {\n      type: 'category',\n      show: true,\n      // data: ['All Trades', 'Winning Trades', 'Losing Trades'],\n    },\n    yAxis: [\n      {\n        type: 'value',\n        name: 'Trade duration',\n        splitArea: {\n          show: true,\n        },\n        axisLabel: {\n          formatter: formatDuration,\n        },\n      },\n    ],\n    tooltip: {\n      formatter: (params: any) => {\n        if (params.seriesType === 'boxplot') {\n          const statistics = params.data;\n          return `\n            <div>${params.name}</div>\n            <div>Min: ${formatDuration(statistics[1])}</div>\n            <div>Q1: ${formatDuration(statistics[2])}</div>\n            <div>Median: ${formatDuration(statistics[3])}</div>\n            <div>Q3: ${formatDuration(statistics[4])}</div>\n            <div>Max: ${formatDuration(statistics[5])}</div>\n          `;\n        }\n        return '';\n      },\n    },\n    visualMap: [\n      {\n        type: 'piecewise',\n        show: false,\n        dimension: 0,\n        pieces: [\n          {\n            min: 0,\n            max: 0,\n            label: 'All Trades',\n            color: '#5470c6',\n          },\n          {\n            min: 1,\n            max: 1,\n            label: 'Winning Trades',\n            color: '#12bb7b',\n          },\n          {\n            min: 2,\n            max: 2,\n            label: 'Losing Trades',\n            color: '#ef5350',\n          },\n        ],\n      },\n    ],\n    series: [\n      {\n        name: 'Trade durations',\n        type: 'boxplot',\n        datasetId: 'allTradesBoxplot',\n        colorBy: 'data',\n        // itemStyle: {\n        //   color: '#b8c5f2',\n        // },\n      },\n      {\n        name: 'outlier',\n        type: 'scatter',\n        datasetId: 'outlier',\n      },\n    ],\n  };\n});\n\n// Helper function to format duration in human-readable format\nfunction formatDuration(minutes: number): string {\n  if (minutes >= 60) {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.floor(minutes % 60);\n    return `${hours}h ${mins}m`;\n  }\n  return `${Math.floor(minutes)}m`;\n}\n</script>\n\n<template>\n  <!-- {{ chartData }} -->\n  <ECharts\n    v-if=\"trades.length > 0\"\n    :option=\"chartOptions\"\n    autoresize\n    :theme=\"settingsStore.chartTheme\"\n  />\n</template>\n\n<style scoped>\n.echarts {\n  width: 100%;\n  height: 100%;\n  min-height: 150px;\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { ClosedTrade } from '@/types';\nimport TradeDurationChart from '../charts/TradeDurationChart.vue';\n\ndefineProps({\n  trades: { required: true, type: Array as () => ClosedTrade[] },\n});\n\nconst botStore = useBotStore();\n\nconst { state: marketChangeData } = useAsyncState(\n  () => botStore.activeBot.getBacktestMarketChange(),\n  null,\n);\n</script>\n<template>\n  <div class=\"text-center flex-fill flex flex-col h-full gap-1\">\n    <TradesLogChart :trades=\"trades\" class=\"flex-grow-1 chart-equal-height\" />\n    <TradeDurationChart\n      class=\"flex-grow-1 chart-equal-height\"\n      :trades=\"trades\"\n      :show-title=\"true\"\n    />\n    <CumProfitChart :trades=\"trades\" class=\"flex-grow-1 chart-equal-height\" :show-title=\"true\" />\n    <MarketChangeChart\n      v-if=\"marketChangeData\"\n      :market-change-data=\"marketChangeData\"\n      class=\"flex-grow-1 chart-equal-height\"\n    />\n    <ProfitDistributionChart\n      class=\"flex-grow-1 chart-equal-height\"\n      :trades=\"trades\"\n      :show-title=\"true\"\n    />\n  </div>\n</template>\n<style scoped lang=\"css\">\n.chart-equal-height {\n  min-height: 300px !important;\n}\n</style>\n","interface childObjects {\n  [key: string]: string | boolean | number | undefined;\n}\ninterface MutatingObject {\n  [key: string]: childObjects[];\n}\n\n/**\n *\n * @param originalobj Object in the form {Name, [{metric: value}]]}\n * @param valueKey Key to use for result\n * @returns Object in the form [{valueKey: metric, Name: value}]\n */\nexport function formatObjectForTable(originalobj: MutatingObject, valueKey: string) {\n  const result = Object.entries(originalobj).reduce((acc: childObjects[], [key, value]) => {\n    value.forEach((item) => {\n      const [metric, val] = Object.entries(item)[0];\n      const existingItem = acc.find((i) => i[valueKey] === metric);\n      if (existingItem) {\n        existingItem[key] = val;\n      } else {\n        acc.push({\n          [valueKey]: metric,\n          [key]: val,\n        });\n      }\n    });\n    return acc;\n  }, []);\n  return result;\n}\n","<script setup lang=\"ts\">\nimport type { BacktestResultInMemory } from '@/types';\n\nconst props = defineProps({\n  backtestResults: { required: true, type: Object as () => Record<string, BacktestResultInMemory> },\n});\n\nconst backtestResultStats = computed(() => {\n  const values = {};\n  Object.entries(props.backtestResults).forEach(([key, result]) => {\n    const tmp = generateBacktestMetricRows(result.strategy);\n    values[key] = tmp;\n  });\n  console.log(values);\n  // return '';\n  return formatObjectForTable(values, 'metric');\n});\n\nconst backtestResultFields = computed(() => {\n  const res = [{ key: 'metric', label: 'Metric' }];\n  Object.entries(props.backtestResults).forEach(([key, value]) => {\n    res.push({ key, label: value.metadata.strategyName });\n  });\n  return res;\n});\n</script>\n\n<template>\n  <div class=\"px-0 mw-full\">\n    <div class=\"flex justify-center\">\n      <h3 class=\"font-bold text-3xl\">Backtest-result comparison</h3>\n    </div>\n    <div class=\"flex flex-col text-start ms-0 me-2 gap-2\">\n      <div class=\"flex flex-col flex-xl-row\">\n        <div class=\"px-0 xl:px-0 pt-2 xl:pt-0 xl:ps-1 flex-fill\">\n          <DataTable bordered :value=\"backtestResultStats\" size=\"small\" show-gridlines>\n            <Column\n              v-for=\"col in backtestResultFields\"\n              :key=\"col.key\"\n              :field=\"col.key\"\n              :label=\"col.label\"\n            >\n              <template #header>\n                <BacktestResultSelectEntry\n                  v-if=\"col.key && col.key in backtestResults\"\n                  :backtest-result=\"backtestResults[col.key]\"\n                />\n                <span v-else>{{ col.label }}</span>\n              </template>\n            </Column>\n          </DataTable>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport type { PeriodicBreakdown } from '@/types';\n\nconst props = defineProps<{\n  periodicBreakdown: PeriodicBreakdown;\n}>();\n\nconst periodicBreakdownSelections = computed(() => {\n  const res = [\n    { value: 'day', text: 'Days' },\n    { value: 'week', text: 'Weeks' },\n    { value: 'month', text: 'Months' },\n  ];\n  if (props.periodicBreakdown.year) {\n    res.push({ value: 'year', text: 'Years' });\n  }\n\n  return res;\n});\n\nconst periodicBreakdownPeriod = ref<string>('month');\n</script>\n\n<template>\n  <SelectButton\n    v-model=\"periodicBreakdownPeriod\"\n    :options=\"periodicBreakdownSelections\"\n    size=\"small\"\n    :allow-empty=\"false\"\n    class=\"m-2\"\n    option-label=\"text\"\n    option-value=\"value\"\n  ></SelectButton>\n  <DataTable size=\"small\" stacked=\"sm\" :value=\"periodicBreakdown[periodicBreakdownPeriod]\">\n    <Column field=\"date\" header=\"Date\"></Column>\n    <Column field=\"trades\" header=\"Trades\">\n      <template #body=\"{ data, field }\">\n        {{ data[field] ?? 'N/A' }}\n      </template>\n    </Column>\n    <Column field=\"profit_abs\" header=\"Total Profit\" :body=\"formatPrice\">\n      <template #body=\"{ data, field }\">\n        {{ data[field] ? data[field].toFixed(2) : 'N/A' }}\n      </template>\n    </Column>\n    <Column field=\"profit_factor\" header=\"Profit Factor\">\n      <template #body=\"{ data, field }\">\n        {{ formatPrice(data[field], 2) }}\n      </template>\n    </Column>\n    <Column field=\"wins\" header=\"Wins\"></Column>\n    <Column field=\"draws\" header=\"Draws\"></Column>\n    <Column field=\"losses\" header=\"Losses\">\n      <template #body=\"{ data }\">\n        {{ data.loses ?? data.losses ?? 'N/A' }}\n      </template>\n    </Column>\n    <Column field=\"wins\" header=\"Win Rate\">\n      <template #body=\"{ data }\">\n        {{\n          ((data.wins / (data.wins + data.draws + (data.loses ?? data.losses))) * 100).toFixed(2) +\n          '%'\n        }}\n      </template>\n    </Column>\n  </DataTable>\n</template>\n","<script setup lang=\"ts\">\nimport type { ExitReasonResults, PairResult } from '@/types';\n\ntype ResultsType = PairResult | ExitReasonResults;\ntype ResultsTypeWithKey = ResultsType & { key?: string | string[] };\nconst props = withDefaults(\n  defineProps<{\n    title: string;\n    results: ResultsType[];\n    stakeCurrency: string;\n    stakeCurrencyDecimals: number;\n    keyHeader?: string;\n    keyHeaders?: string[];\n  }>(),\n  {\n    keyHeader: '',\n    keyHeaders: () => [],\n  },\n);\n\nconst tableItems = computed<ResultsTypeWithKey[]>(() =>\n  props.results.map((v) => {\n    if (props.keyHeaders.length > 0) {\n      return {\n        ...v,\n        key:\n          typeof v['key'] === 'string' ? Array(props.keyHeaders.length).fill(v['key']) : v['key'],\n      };\n    }\n    return v;\n  }),\n);\n\nconst perTagReason = computed(() => {\n  const firstFields: {\n    key: string;\n    label: string;\n    formatter: (value: string, item: ResultsTypeWithKey) => string;\n  }[] = [];\n  if (props.keyHeaders.length > 0) {\n    // Keys could be an array\n    for (let i = 0; i < props.keyHeaders.length; i += 1) {\n      firstFields.push({\n        key: `key[${i}]`,\n        label: props.keyHeaders[i],\n        formatter: (value, item) =>\n          Array.isArray(value) ? value[i] : value || item['exit_reason'] || 'OTHER',\n      });\n    }\n  } else {\n    firstFields.push({\n      key: 'key',\n      label: props.keyHeader,\n      formatter: (value, item) => (value || item['exit_reason'] || 'OTHER') as string,\n    });\n  }\n  return firstFields;\n});\n\nconst settingsStore = useSettingsStore();\n\nconst metrics = computed(() =>\n  availableBacktestMetrics.value.filter(\n    (metric) =>\n      metric.field !== 'key' && settingsStore.backtestAdditionalMetrics.includes(metric.field),\n  ),\n);\n</script>\n<template>\n  <DraggableContainer>\n    <template #header>\n      <div class=\"flex flex-row w-full justify-between items-center\">\n        {{ title }}\n        <div>\n          Shown metrics:\n          <MultiSelect\n            id=\"backtestMetrics\"\n            v-model=\"settingsStore.backtestAdditionalMetrics\"\n            :options=\"availableBacktestMetrics\"\n            option-label=\"header\"\n            option-value=\"field\"\n            size=\"small\"\n          />\n        </div>\n      </div>\n    </template>\n    <DataTable size=\"small\" hover stacked=\"sm\" :value=\"tableItems\">\n      <Column v-for=\"col in perTagReason\" :key=\"col.key\" :field=\"col.key\" :header=\"col.label\">\n        <template #body=\"{ data }\">\n          {{ col.formatter(data['key'], data) }}\n        </template>\n      </Column>\n      <Column field=\"trades\" header=\"Trades\"></Column>\n      <Column field=\"profit_mean\" header=\"Avg Profit %\">\n        <template #body=\"{ data, field }\">\n          {{ formatPercent(data[field], 2) }}\n        </template>\n      </Column>\n      <Column field=\"profit_total_abs\" :header=\"`Tot Profit ${props.stakeCurrency}`\">\n        <template #body=\"{ data, field }\">\n          {{ formatPrice(data[field], props.stakeCurrencyDecimals) }}\n        </template>\n      </Column>\n      <Column field=\"profit_total\" header=\"Tot Profit %\">\n        <template #body=\"{ data, field }\">\n          {{ formatPercent(data[field], 2) }}\n        </template>\n      </Column>\n      <Column field=\"wins\" header=\"Wins\"></Column>\n      <Column field=\"draws\" header=\"Draws\"></Column>\n      <Column field=\"losses\" header=\"Losses\"></Column>\n\n      <Column v-for=\"col in metrics\" :key=\"col.field\" :field=\"col.field\" :header=\"col.header\">\n        <template #body=\"{ data, field }\">\n          {{ col.is_ratio ? formatPercent(data[field], 2) : formatPrice(data[field], 2) }}\n        </template>\n      </Column>\n    </DataTable>\n  </DraggableContainer>\n</template>\n","<script setup lang=\"ts\">\nimport type { StrategyBacktestResult } from '@/types';\n\nconst props = defineProps<{\n  backtestResult: StrategyBacktestResult;\n}>();\n\nconst backtestResultStats = computed(() => {\n  const tmp = generateBacktestMetricRows(props.backtestResult);\n  return formatObjectForTable({ value: tmp }, 'metric');\n});\n\nconst backtestResultSettings = computed(() => {\n  // Transpose Result into readable format\n  const tmp = generateBacktestSettingRows(props.backtestResult);\n\n  return formatObjectForTable({ value: tmp }, 'setting');\n});\n</script>\n\n<template>\n  <div class=\"px-0 w-full\">\n    <div class=\"flex justify-center\">\n      <h3 class=\"font-bold text-2xl mb-2\">\n        Backtest-result for {{ backtestResult.strategy_name }}\n      </h3>\n    </div>\n\n    <div class=\"flex flex-col text-start ms-0 me-2 gap-2\">\n      <div class=\"flex flex-col xl:flex-row\">\n        <div class=\"px-0 px-xl-0 pe-xl-1 grow\">\n          <DraggableContainer header=\"Strategy settings\">\n            <DataTable size=\"small\" :value=\"backtestResultSettings\">\n              <Column field=\"setting\" header=\"Setting\"></Column>\n              <Column field=\"value\" header=\"Value\"></Column>\n            </DataTable>\n          </DraggableContainer>\n        </div>\n        <div class=\"px-0 xl:px-0 pt-2 xl:pt-0 xl:ps-1 grow\">\n          <DraggableContainer header=\"Metrics\">\n            <DataTable size=\"small\" borderless :value=\"backtestResultStats\">\n              <Column field=\"metric\" header=\"Metric\" />\n              <Column field=\"value\" header=\"Value\" />\n            </DataTable>\n          </DraggableContainer>\n        </div>\n      </div>\n      <BacktestResultTablePer\n        title=\"Results per Enter tag\"\n        :results=\"backtestResult.results_per_enter_tag\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        key-header=\"Enter Tag\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n\n      <BacktestResultTablePer\n        title=\"Results per Exit reason\"\n        :results=\"backtestResult.exit_reason_summary ?? []\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        key-header=\"Exit Reason\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n\n      <BacktestResultTablePer\n        v-if=\"backtestResult.mix_tag_stats\"\n        title=\"Results Mixed Tag\"\n        :results=\"backtestResult.mix_tag_stats ?? []\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        :key-headers=\"['Enter Tag', 'Exit Tag']\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n\n      <BacktestResultTablePer\n        title=\"Results per pair\"\n        :results=\"backtestResult.results_per_pair\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        key-header=\"Pair\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n      <DraggableContainer v-if=\"backtestResult.periodic_breakdown\" header=\"Periodic breakdown\">\n        <BacktestResultPeriodBreakdown :periodic-breakdown=\"backtestResult.periodic_breakdown\">\n        </BacktestResultPeriodBreakdown>\n      </DraggableContainer>\n\n      <DraggableContainer header=\"Single trades\">\n        <TradeList\n          :trades=\"backtestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"backtestResult.stake_currency\"\n        />\n      </DraggableContainer>\n    </div>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst locFreqaiModel = defineModel<string>();\nconst botStore = useBotStore();\n\nonMounted(() => {\n  if (botStore.activeBot.freqaiModelList.length === 0) {\n    botStore.activeBot.getFreqAIModelList();\n  }\n});\n</script>\n\n<template>\n  <div>\n    <div class=\"w-full flex\">\n      <Select\n        v-model=\"locFreqaiModel\"\n        :options=\"botStore.activeBot.freqaiModelList\"\n        fluid\n        size=\"small\"\n      >\n      </Select>\n      <div class=\"ms-2\">\n        <Button\n          severity=\"secondary\"\n          variant=\"outlined\"\n          size=\"small\"\n          @click=\"botStore.activeBot.getFreqAIModelList\"\n        >\n          <template #icon>\n            <i-mdi-refresh />\n          </template>\n        </Button>\n      </div>\n    </div>\n  </div>\n</template>\n","export const useBtStore = defineStore('btStore', {\n  state: () => {\n    return {\n      strategy: '',\n      selectedTimeframe: '',\n      selectedDetailTimeframe: '',\n      timerange: '',\n      maxOpenTrades: null as number | null,\n      stakeAmount: null as number | null,\n      startingCapital: null as number | null,\n      allowCache: true,\n      enableProtections: false,\n      stakeAmountUnlimited: false,\n      freqAI: {\n        enabled: false,\n        model: '',\n        identifier: '',\n      },\n    };\n  },\n  getters: {\n    canRunBacktest: (state) => state.strategy !== '',\n  },\n  actions: {},\n});\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useBtStore, import.meta.hot));\n}\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport type { BacktestPayload } from '@/types';\n\nimport { useBtStore } from '@/stores/btStore';\nconst botStore = useBotStore();\nconst btStore = useBtStore();\n\nfunction clickBacktest() {\n  const btPayload: BacktestPayload = {\n    strategy: btStore.strategy,\n    timerange: btStore.timerange,\n    enable_protections: btStore.enableProtections,\n  };\n  if (btStore.maxOpenTrades) {\n    btPayload.max_open_trades = btStore.maxOpenTrades;\n  }\n  if (btStore.stakeAmountUnlimited) {\n    btPayload.stake_amount = 'unlimited';\n  } else {\n    const stakeAmountLoc = Number(btStore.stakeAmount);\n    if (stakeAmountLoc) {\n      btPayload.stake_amount = stakeAmountLoc.toString();\n    }\n  }\n\n  const startingCapitalLoc = Number(btStore.startingCapital);\n  if (startingCapitalLoc) {\n    btPayload.dry_run_wallet = startingCapitalLoc;\n  }\n\n  if (btStore.selectedTimeframe) {\n    btPayload.timeframe = btStore.selectedTimeframe;\n  }\n  if (btStore.selectedDetailTimeframe) {\n    btPayload.timeframe_detail = btStore.selectedDetailTimeframe;\n  }\n  if (!btStore.allowCache) {\n    btPayload.backtest_cache = 'none';\n  }\n  if (btStore.freqAI.enabled) {\n    btPayload.freqaimodel = btStore.freqAI.model;\n    if (btStore.freqAI.identifier !== '') {\n      btPayload.freqai = { identifier: btStore.freqAI.identifier };\n    }\n  }\n\n  botStore.activeBot.startBacktest(btPayload);\n}\n</script>\n\n<template>\n  <div class=\"mb-2\">\n    <span>Strategy</span>\n    <StrategySelect v-model=\"btStore.strategy\"></StrategySelect>\n  </div>\n  <div\n    class=\"grid grid-cols-2 border border-surface-500 rounded-sm gap-y-2 gap-2 items-center p-1 pt-3\"\n    :disabled=\"botStore.activeBot.backtestRunning\"\n  >\n    <!-- Backtesting parameters -->\n    <h3 class=\"font-bold mb-2 col-span-2 text-center\">Backtesting parameters</h3>\n    <label for=\"timeframe-select\">Timeframe:</label>\n    <TimeframeSelect id=\"timeframe-select\" v-model=\"btStore.selectedTimeframe\" size=\"small\" />\n    <label for=\"timeframe-detail-select\" class=\"flex justify-end items-center gap-2\"\n      >Detail Timeframe:\n      <InfoBox\n        hint=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\n      />\n    </label>\n    <TimeframeSelect\n      id=\"timeframe-detail-select\"\n      v-model=\"btStore.selectedDetailTimeframe\"\n      size=\"small\"\n      :below-timeframe=\"btStore.selectedTimeframe\"\n    />\n\n    <label for=\"max-open-trades\">Max open trades:</label>\n    <InputNumber\n      id=\"max-open-trades\"\n      v-model=\"btStore.maxOpenTrades\"\n      size=\"small\"\n      placeholder=\"Use strategy default\"\n      type=\"number\"\n    ></InputNumber>\n    <label for=\"starting-capital\">Starting capital:</label>\n    <InputNumber\n      id=\"starting-capital\"\n      v-model=\"btStore.startingCapital\"\n      size=\"small\"\n      placeholder=\"Use config default\"\n      type=\"number\"\n      :step=\"0.001\"\n    ></InputNumber>\n    <label for=\"stake-amount-bool\">Stake amount:</label>\n    <div class=\"flex items-center\">\n      <div class=\"flex basis-full\">\n        <BaseCheckbox id=\"stake-amount-bool\" v-model=\"btStore.stakeAmountUnlimited\"\n          >Unlimited stake</BaseCheckbox\n        >\n      </div>\n      <InputNumber\n        id=\"stake-amount\"\n        v-model=\"btStore.stakeAmount\"\n        placeholder=\"Use strategy default\"\n        :step=\"0.01\"\n        size=\"small\"\n        :disabled=\"btStore.stakeAmountUnlimited\"\n      ></InputNumber>\n    </div>\n\n    <label for=\"enable-protections\">Enable Protections:</label>\n    <BaseCheckbox id=\"enable-protections\" v-model=\"btStore.enableProtections\"></BaseCheckbox>\n    <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\n      <label for=\"enable-cache\">Cache Backtest results:</label>\n      <BaseCheckbox id=\"enable-cache\" v-model=\"btStore.allowCache\"></BaseCheckbox>\n    </template>\n\n    <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\n      <div class=\"flex justify-end items-center\">\n        <span class=\"me-2\">Enable FreqAI:</span>\n        <InfoBox\n          hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\n        />\n      </div>\n      <BaseCheckbox id=\"enable-freqai\" v-model=\"btStore.freqAI.enabled\"></BaseCheckbox>\n\n      <template v-if=\"btStore.freqAI.enabled\">\n        <label for=\"freqai-identifier\">FreqAI identifier:</label>\n        <InputText\n          id=\"freqai-identifier\"\n          v-model=\"btStore.freqAI.identifier\"\n          placeholder=\"Use config default\"\n          size=\"small\"\n        ></InputText>\n      </template>\n      <template v-if=\"btStore.freqAI.enabled\">\n        <label for=\"freqai-model\">FreqAI Model:</label>\n        <FreqaiModelSelect id=\"freqai-model\" v-model=\"btStore.freqAI.model\"></FreqaiModelSelect>\n      </template>\n    </template>\n\n    <Divider class=\"col-span-2\" />\n    <TimeRangeSelect v-model=\"btStore.timerange\" class=\"mx-auto mt-2 col-span-2\"></TimeRangeSelect>\n  </div>\n\n  <h3 class=\"mt-3 font-bold text-2xl\">Backtesting summary</h3>\n  <div class=\"flex flex-wrap md:flex-nowrap justify-between md:justify-center\">\n    <Button\n      id=\"start-backtest\"\n      severity=\"primary\"\n      :disabled=\"\n        !btStore.canRunBacktest ||\n        botStore.activeBot.backtestRunning ||\n        !botStore.activeBot.canRunBacktest\n      \"\n      class=\"mx-1\"\n      @click=\"clickBacktest\"\n    >\n      Start backtest\n    </Button>\n    <Button\n      severity=\"secondary\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      class=\"mx-1\"\n      @click=\"botStore.activeBot.pollBacktest\"\n    >\n      Load backtest result\n    </Button>\n    <Button\n      severity=\"secondary\"\n      class=\"mx-1\"\n      :disabled=\"!botStore.activeBot.backtestRunning\"\n      @click=\"botStore.activeBot.stopBacktest\"\n    >\n      Stop Backtest\n    </Button>\n    <Button\n      severity=\"secondary\"\n      class=\"mx-1\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      @click=\"botStore.activeBot.removeBacktest\"\n    >\n      Reset Backtest\n    </Button>\n  </div>\n</template>\n<style lang=\"css\" scoped>\nlabel {\n  @apply text-right;\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { MsgBoxObject } from '@/components/general/MessageBox.vue';\nimport MessageBox from '@/components/general/MessageBox.vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport type { BacktestHistoryEntry } from '@/types';\nimport InfoBox from '../general/InfoBox.vue';\n\nconst botStore = useBotStore();\nconst msgBox = ref<typeof MessageBox>();\nconst filterText = ref('');\nconst filterTextDebounced = refDebounced(filterText, 350, { maxWait: 1000 });\n\nonMounted(() => {\n  botStore.activeBot.getBacktestHistory();\n});\n\nfunction deleteBacktestResult(result: BacktestHistoryEntry) {\n  const msg: MsgBoxObject = {\n    title: 'Delete result',\n    message: `Delete result ${result.filename} from disk?`,\n    accept: () => {\n      botStore.activeBot.deleteBacktestHistoryResult(result);\n    },\n  };\n  msgBox.value?.show(msg);\n}\n\nconst filteredList = computed(() =>\n  botStore.activeBot.backtestHistoryList.filter(\n    (r) =>\n      r.filename.toLowerCase().includes(filterTextDebounced.value.toLowerCase()) ||\n      r.strategy.toLowerCase().includes(filterTextDebounced.value.toLowerCase()),\n  ),\n);\nfunction rowClick(row) {\n  botStore.activeBot.getBacktestHistoryResult(row.data);\n}\n</script>\n\n<template>\n  <div>\n    <Button\n      class=\"float-end\"\n      title=\"Refresh\"\n      aria-label=\"Refresh\"\n      variant=\"outlined\"\n      severity=\"secondary\"\n      @click=\"botStore.activeBot.getBacktestHistory\"\n    >\n      <i-mdi-refresh />\n    </Button>\n    <p>\n      Load Historic results from disk. You can click on multiple results to load all of them into\n      freqUI.\n    </p>\n    <div v-if=\"botStore.activeBot.backtestHistoryList.length > 0\" class=\"flex align-center\">\n      <InputText\n        id=\"trade-filter\"\n        v-model=\"filterText\"\n        type=\"text\"\n        size=\"small\"\n        placeholder=\"Filter results\"\n        title=\"Filter results\"\n      />\n    </div>\n    <DataTable\n      v-if=\"botStore.activeBot.backtestHistoryList.length > 0\"\n      class=\"mt-2\"\n      responsive\n      size=\"small\"\n      scrollable\n      scroll-height=\"50rem\"\n      :virtual-scroller-options=\"{ itemSize: 46 }\"\n      show-gridlines\n      :value=\"filteredList\"\n      @row-click=\"rowClick\"\n    >\n      <Column field=\"strategy\" header=\"Strategy2\"></Column>\n      <Column field=\"timeframe\" header=\"Details\">\n        <template #body=\"{ data }\">\n          <strong>{{ data.timeframe }}</strong>\n          <span v-if=\"data.backtest_start_ts && data.backtest_end_ts\" class=\"ms-1\">\n            {{ timestampToTimeRangeString(data.backtest_start_ts * 1000) }}-{{\n              timestampToTimeRangeString(data.backtest_end_ts * 1000)\n            }}</span\n          >\n        </template>\n      </Column>\n      <Column field=\"backtest_start_time\" header=\"Backtest Time\">\n        <template #body=\"{ data }\">\n          <DateTimeTZ :date=\"data.backtest_start_time * 1000\" />\n        </template>\n      </Column>\n      <Column field=\"filename\" header=\"Filename\"></Column>\n      <Column field=\"actions\" header=\"Actions\">\n        <template #body=\"{ data }\">\n          <div class=\"flex items-center\">\n            <InfoBox\n              v-if=\"botStore.activeBot.botApiVersion >= 2.32\"\n              :class=\"data.notes ? 'opacity-100' : 'opacity-0'\"\n              :hint=\"data.notes ?? ''\"\n            ></InfoBox>\n            <Button\n              v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\n              class=\"ms-1\"\n              size=\"small\"\n              title=\"Load this Result.\"\n              :disabled=\"data.run_id in botStore.activeBot.backtestHistory\"\n              @click.stop=\"botStore.activeBot.getBacktestHistoryResult(data)\"\n            >\n              <template #icon>\n                <i-mdi-arrow-right />\n              </template>\n            </Button>\n            <Button\n              v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\n              class=\"ms-1\"\n              size=\"small\"\n              severity=\"secondary\"\n              title=\"Delete this Result.\"\n              :disabled=\"data.run_id in botStore.activeBot.backtestHistory\"\n              @click.stop=\"deleteBacktestResult(data)\"\n            >\n              <template #icon>\n                <i-mdi-delete />\n              </template>\n            </Button>\n          </div>\n        </template>\n      </Column>\n    </DataTable>\n  </div>\n  <MessageBox ref=\"msgBox\" />\n</template>\n","<script setup lang=\"ts\">\nimport type { BacktestResultInMemory, BacktestResultUpdate } from '@/types';\n\ndefineProps({\n  backtestHistory: {\n    required: true,\n    type: Object as () => Record<string, BacktestResultInMemory>,\n  },\n  selectedBacktestResultKey: { required: false, default: '', type: String },\n  canUseModify: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits<{\n  selectionChange: [value: string];\n  removeResult: [value: string];\n  updateResult: [value: BacktestResultUpdate];\n}>();\n\nconst setBacktestResult = (key: string) => {\n  emit('selectionChange', key);\n};\n\nfunction confirmInput(run_id: string, result: BacktestResultInMemory) {\n  result.metadata.editing = !result.metadata.editing;\n  if (result.metadata.filename) {\n    emit('updateResult', {\n      run_id: run_id,\n      notes: result.metadata.notes ?? '',\n      filename: result.metadata.filename,\n      strategy: result.metadata.strategyName,\n    });\n  }\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col items-stretch\">\n    <h3 class=\"font-bold text-2xl\">Available results:</h3>\n    <ul\n      class=\"ms-2 divide-y border-x border-surface-500 rounded-sm border-y divide-solid divide-surface-500\"\n    >\n      <li\n        v-for=\"[key, result] in Object.entries(backtestHistory)\"\n        :key=\"key\"\n        button\n        :class=\"{\n          'bg-primary dark:border-primary text-primary-contrast': key === selectedBacktestResultKey,\n        }\"\n        class=\"flex justify-between items-center py-1 px-1\"\n        @click=\"setBacktestResult(key)\"\n      >\n        <template v-if=\"!result.metadata.editing\">\n          <BacktestResultSelectEntry :backtest-result=\"result\" :can-use-modify=\"canUseModify\" />\n          <div class=\"flex\">\n            <Button\n              v-if=\"canUseModify\"\n              class=\"flex-nowrap\"\n              size=\"small\"\n              severity=\"secondary\"\n              title=\"Modify result notes.\"\n              @click.stop=\"result.metadata.editing = !result.metadata.editing\"\n            >\n              <template #icon>\n                <i-mdi-pencil />\n              </template>\n            </Button>\n            <Button\n              size=\"small\"\n              class=\"flex-nowrap\"\n              severity=\"secondary\"\n              title=\"Delete this Result from UI.\"\n              @click.stop=\"emit('removeResult', key)\"\n            >\n              <template #icon>\n                <i-mdi-delete />\n              </template>\n            </Button>\n          </div>\n        </template>\n        <template v-if=\"result.metadata.editing\">\n          <Textarea v-model=\"result.metadata.notes\" placeholder=\"notes\" size=\"small\"> </Textarea>\n\n          <Button size=\"small\" title=\"Confirm\" @click.stop=\"confirmInput(key, result)\">\n            <template #icon>\n              <i-mdi-check />\n            </template>\n          </Button>\n        </template>\n      </li>\n    </ul>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useBtStore } from '@/stores/btStore';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nenum BtRunModes {\n  run = 'run',\n  results = 'results',\n  visualize = 'visualize',\n  visualizesummary = 'visualize-summary',\n  compareresults = 'compare-results',\n  historicresults = 'historicResults',\n}\n\nconst botStore = useBotStore();\nconst btStore = useBtStore();\n\nconst hasBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\n    : false,\n);\nconst hasMultiBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length > 1\n    : false,\n);\n\nconst timeframe = computed((): string => {\n  try {\n    return botStore.activeBot.selectedBacktestResult.timeframe;\n  } catch (err) {\n    return '';\n  }\n});\n\nconst showLeftBar = ref(false);\n\nconst btFormMode = ref<BtRunModes>(BtRunModes.run);\nconst pollInterval = ref<number | null>(null);\n\nconst selectBacktestResult = () => {\n  // Set parameters for this result\n  btStore.strategy = botStore.activeBot.selectedBacktestResult.strategy_name;\n  botStore.activeBot.getStrategy(btStore.strategy);\n  btStore.selectedTimeframe = botStore.activeBot.selectedBacktestResult.timeframe;\n  btStore.selectedDetailTimeframe =\n    botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\n  btStore.timerange = botStore.activeBot.selectedBacktestResult.timerange;\n};\n\nwatch(\n  () => botStore.activeBot.selectedBacktestResultKey,\n  () => {\n    selectBacktestResult();\n  },\n);\n\nonMounted(() => botStore.activeBot.getState());\nwatch(\n  () => botStore.activeBot.backtestRunning,\n  () => {\n    if (botStore.activeBot.backtestRunning === true) {\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\n    } else if (pollInterval.value) {\n      clearInterval(pollInterval.value);\n      pollInterval.value = null;\n    }\n  },\n);\n</script>\n\n<template>\n  <div class=\"flex flex-row pt-1 me-1 relative\" style=\"height: calc(100vh - 60px)\">\n    <div\n      class=\"flex md:flex-row h-full w-16\"\n      :class=\"{\n        'w-96!': showLeftBar,\n      }\"\n    >\n      <!-- Left bar -->\n      <div\n        v-if=\"btFormMode !== 'visualize'\"\n        class=\"me-3 flex flex-col fixed\"\n        style=\"max-height: calc(100vh - 60px)\"\n      >\n        <Button\n          class=\"self-start\"\n          aria-label=\"Close\"\n          size=\"small\"\n          severity=\"secondary\"\n          variant=\"outlined\"\n          @click=\"showLeftBar = !showLeftBar\"\n        >\n          <i-mdi-chevron-right v-if=\"!showLeftBar\" width=\"24\" height=\"24\" />\n          <i-mdi-chevron-left v-if=\"showLeftBar\" width=\"24\" height=\"24\" />\n        </Button>\n        <Transition name=\"fade\">\n          <BacktestResultSelect\n            v-if=\"showLeftBar\"\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\n            :can-use-modify=\"botStore.activeBot.botApiVersion >= 2.32\"\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\n            @remove-result=\"botStore.activeBot.removeBacktestResultFromMemory\"\n            @update-result=\"botStore.activeBot.saveBacktestResultMetadata\"\n          />\n        </Transition>\n      </div>\n      <!-- End Left bar -->\n    </div>\n    <div class=\"flex flex-col w-full\">\n      <h2 class=\"ms-5 text-3xl font-bold\">Backtesting</h2>\n      <p v-if=\"!botStore.activeBot.canRunBacktest\">\n        Bot must be in webserver mode to enable Backtesting.\n      </p>\n      <div class=\"w-full\">\n        <Tabs value=\"run\" lazy>\n          <TabList>\n            <Tab\n              v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\n              v-model=\"btFormMode\"\n              class=\"flex items-center\"\n              value=\"historicResults\"\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\n              ><i-mdi-cloud-download class=\"me-2\" />Load Results</Tab\n            >\n            <Tab\n              v-model=\"btFormMode\"\n              class=\"flex items-center\"\n              value=\"run\"\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\n              ><i-mdi-run-fast class=\"me-2\" />Run backtest</Tab\n            >\n            <Tab\n              id=\"bt-analyze-btn\"\n              v-model=\"btFormMode\"\n              class=\"flex items-center\"\n              value=\"results\"\n              :disabled=\"!hasBacktestResult\"\n              ><i-mdi-table-eye class=\"me-2\" />Analyze result</Tab\n            >\n            <Tab\n              v-if=\"hasMultiBacktestResult\"\n              v-model=\"btFormMode\"\n              class=\"flex items-center\"\n              value=\"compare-results\"\n              :disabled=\"!hasMultiBacktestResult\"\n              ><i-mdi-compare-horizontal class=\"me-2\" />Compare results</Tab\n            >\n            <Tab\n              v-model=\"btFormMode\"\n              class=\"flex items-center\"\n              value=\"visualize-summary\"\n              :disabled=\"!hasBacktestResult\"\n              ><i-mdi-chart-bell-curve-cumulative class=\"me-2\" />Visualize summary</Tab\n            >\n            <Tab\n              v-model=\"btFormMode\"\n              class=\"flex items-center\"\n              value=\"visualize\"\n              :disabled=\"!hasBacktestResult\"\n              ><i-mdi-chart-timeline-variant-shimmer class=\"me-2\" />Visualize result</Tab\n            >\n          </TabList>\n          <TabPanels>\n            <TabPanel value=\"historicResults\">\n              <BacktestHistoryLoad />\n            </TabPanel>\n            <TabPanel value=\"run\">\n              <BacktestRun />\n            </TabPanel>\n            <TabPanel value=\"results\">\n              <BacktestResultAnalysis\n                v-if=\"hasBacktestResult\"\n                :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n                class=\"flex-fill\"\n              />\n            </TabPanel>\n            <TabPanel value=\"compare-results\">\n              <BacktestResultComparison\n                v-if=\"hasMultiBacktestResult\"\n                :backtest-results=\"botStore.activeBot.backtestHistory\"\n                class=\"flex-fill\"\n              />\n            </TabPanel>\n            <TabPanel value=\"visualize-summary\">\n              <BacktestGraphs\n                v-if=\"hasBacktestResult\"\n                :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n                class=\"flex-fill\"\n              />\n            </TabPanel>\n            <TabPanel value=\"visualize\" l>\n              <BacktestResultChart\n                :timeframe=\"timeframe\"\n                :strategy=\"btStore.strategy\"\n                :timerange=\"btStore.timerange\"\n                :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n                :freqai-model=\"btStore.freqAI.enabled ? btStore.freqAI.model : undefined\"\n              />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n\n        <small v-show=\"botStore.activeBot.backtestRunning\" class=\"text-end bt-running-label\"\n          >Backtest running: {{ botStore.activeBot.backtestStep }}\n          {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\n        >\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"css\" scoped>\n.bt-running-label {\n  position: absolute;\n  right: 2em;\n  margin-top: 1em;\n}\n\n.flex-samesize-items {\n  flex: 1 1 0;\n  @media md {\n    flex: unset;\n  }\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.bt-config {\n  @media (min-width: 992px) {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 75vw;\n  }\n}\n</style>\n"],"names":["style","classes","RadioButtonGroupStyle","BaseStyle","script$1","BaseEditableHolder","script","newValue","uuid","render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","mergeProps","renderSlot","props","__props","emit","__emit","botStore","useBotStore","selectedTrade","ref","sortDescendingOrder","sortMethod","sortMethodOptions","onTradeSelect","trade","sortedTrades","computed","field","a","b","ordersVisible","watch","isBarVisible","sliderPosition","navigateChartToTrade","refreshOHLCV","pair","columns","CHART_MARKET_CHANGE","use","LineChart","CalendarComponent","CanvasRenderer","GridComponent","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","VisualMapComponent","settingsStore","useSettingsStore","marketChangeChart","marketChangeOptions","colDate","el","colRelMean","echartsGridDefault","dataZoomPartial","TransformComponent","BoxplotChart","ScatterChart","allTrades","winningTrades","losingTrades","chartOptions","params","formatDuration","statistics","minutes","hours","mins","marketChangeData","useAsyncState","formatObjectForTable","originalobj","valueKey","acc","key","value","item","metric","val","existingItem","i","backtestResultStats","values","result","tmp","generateBacktestMetricRows","backtestResultFields","res","periodicBreakdownSelections","periodicBreakdownPeriod","tableItems","v","perTagReason","firstFields","metrics","availableBacktestMetrics","backtestResultSettings","generateBacktestSettingRows","locFreqaiModel","_useModel","onMounted","useBtStore","defineStore","state","btStore","clickBacktest","btPayload","stakeAmountLoc","startingCapitalLoc","msgBox","filterText","filterTextDebounced","refDebounced","deleteBacktestResult","msg","_a","filteredList","r","rowClick","row","setBacktestResult","confirmInput","run_id","hasBacktestResult","hasMultiBacktestResult","timeframe","showLeftBar","btFormMode","pollInterval","selectBacktestResult"],"mappings":"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","x_google_ignoreList":[0,1,2]}